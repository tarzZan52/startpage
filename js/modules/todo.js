// –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏
const TodoModule = {
    tasks: [],
    currentFilter: 'all',
    
    // DOM —ç–ª–µ–º–µ–Ω—Ç—ã
    elements: {
        input: null,
        addBtn: null,
        list: null,
        stats: null,
        prioritySelect: null,
        filters: null,
        clearCompleted: null,
        deadlineInput: null
    },
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
    init() {
        this.loadElements();
        this.loadTasks();
        this.setupEventListeners();
        this.render();
    },
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    loadElements() {
        this.elements.input = document.getElementById('todoInput');
        this.elements.addBtn = document.getElementById('todoAddBtn');
        this.elements.list = document.getElementById('todoList');
        this.elements.stats = document.getElementById('todoStats');
        this.elements.prioritySelect = document.getElementById('todoPriority');
        this.elements.filters = document.querySelectorAll('.todo-filter');
        this.elements.clearCompleted = document.getElementById('todoClearCompleted');
        this.elements.deadlineInput = document.getElementById('todoDeadline');
    },
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    setupEventListeners() {
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
        this.elements.addBtn.addEventListener('click', () => this.addTask());
        this.elements.input.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                this.addTask();
            }
        });
        
        // –§–∏–ª—å—Ç—Ä—ã
        this.elements.filters.forEach(filter => {
            filter.addEventListener('click', (e) => {
                this.setFilter(e.target.dataset.filter);
            });
        });
        
        // –û—á–∏—Å—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö
        this.elements.clearCompleted.addEventListener('click', () => {
            this.clearCompleted();
        });
        
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        document.addEventListener('keydown', (e) => {
            if (!Dashboard.isActive || 
                ['INPUT', 'TEXTAREA', 'SELECT'].includes(e.target.tagName)) {
                return;
            }
            
            // Ctrl/Cmd + Enter - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
            if ((e.ctrlKey || e.metaKey) && e.key === 'Enter') {
                e.preventDefault();
                this.elements.input.focus();
            }
        });
    },
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    addTask() {
        const text = this.elements.input.value.trim();
        if (!text) return;
        
        const task = {
            id: Date.now(),
            text: text,
            completed: false,
            priority: this.elements.prioritySelect.value,
            deadline: this.elements.deadlineInput.value || null,
            createdAt: new Date().toISOString(),
            completedAt: null
        };
        
        this.tasks.unshift(task); // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ
        this.saveTasks();
        this.render();
        
        // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã
        this.elements.input.value = '';
        this.elements.prioritySelect.value = 'medium';
        this.elements.deadlineInput.value = '';
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        this.animateTaskAdd();
    },
    
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–¥–∞—á–∏
    toggleTask(id) {
        const task = this.tasks.find(t => t.id === id);
        if (task) {
            task.completed = !task.completed;
            task.completedAt = task.completed ? new Date().toISOString() : null;
            this.saveTasks();
            this.render();
        }
    },
    
    // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    deleteTask(id) {
        this.tasks = this.tasks.filter(t => t.id !== id);
        this.saveTasks();
        this.render();
    },
    
    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    editTask(id, newText) {
        const task = this.tasks.find(t => t.id === id);
        if (task) {
            task.text = newText.trim();
            this.saveTasks();
            this.render();
        }
    },
    
    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∑–∞–¥–∞—á–∏
    changePriority(id, newPriority) {
        const task = this.tasks.find(t => t.id !== id);
        if (task) {
            task.priority = newPriority;
            this.saveTasks();
            this.render();
        }
    },
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞
    setFilter(filter) {
        this.currentFilter = filter;
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
        this.elements.filters.forEach(f => {
            f.classList.toggle('active', f.dataset.filter === filter);
        });
        
        this.render();
    },
    
    // –û—á–∏—Å—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    clearCompleted() {
        const completedCount = this.tasks.filter(t => t.completed).length;
        if (completedCount === 0) return;
        
        if (confirm(`–£–¥–∞–ª–∏—Ç—å ${completedCount} –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á?`)) {
            this.tasks = this.tasks.filter(t => !t.completed);
            this.saveTasks();
            this.render();
        }
    },
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    getFilteredTasks() {
        let filtered = [...this.tasks];
        
        switch (this.currentFilter) {
            case 'active':
                filtered = filtered.filter(t => !t.completed);
                break;
            case 'completed':
                filtered = filtered.filter(t => t.completed);
                break;
        }
        
        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é, –ø–æ—Ç–æ–º –ø–æ –¥–µ–¥–ª–∞–π–Ω—É, –ø–æ—Ç–æ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É, –ø–æ—Ç–æ–º –ø–æ –¥–∞—Ç–µ
        return filtered.sort((a, b) => {
            if (a.completed !== b.completed) {
                return a.completed ? 1 : -1;
            }
            
            // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–µ–¥–ª–∞–π–Ω—É (–±–ª–∏–∂–∞–π—à–∏–µ –ø–µ—Ä–≤—ã–µ)
            if (!a.completed && a.deadline && b.deadline) {
                return new Date(a.deadline) - new Date(b.deadline);
            } else if (!a.completed && a.deadline && !b.deadline) {
                return -1;
            } else if (!a.completed && !a.deadline && b.deadline) {
                return 1;
            }
            
            const priorityOrder = { high: 0, medium: 1, low: 2 };
            if (priorityOrder[a.priority] !== priorityOrder[b.priority]) {
                return priorityOrder[a.priority] - priorityOrder[b.priority];
            }
            
            return new Date(b.createdAt) - new Date(a.createdAt);
        });
    },
    
    // –°–æ–∑–¥–∞–Ω–∏–µ HTML —ç–ª–µ–º–µ–Ω—Ç–∞ –∑–∞–¥–∞—á–∏
    createTaskElement(task) {
        const item = document.createElement('div');
        item.className = `todo-item priority-${task.priority}`;
        if (task.completed) {
            item.classList.add('completed');
        }
        
        const priorityDots = {
            low: '‚óè',
            medium: '‚óè‚óè', 
            high: '‚óè‚óè‚óè'
        };
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–µ–¥–ª–∞–π–Ω–∞
        let deadlineHtml = '';
        if (task.deadline && !task.completed) {
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            const deadline = new Date(task.deadline);
            deadline.setHours(0, 0, 0, 0);
            const daysLeft = Math.ceil((deadline - today) / (1000 * 60 * 60 * 24));
            
            let deadlineClass = 'todo-deadline';
            let deadlineText = '';
            
            if (daysLeft < 0) {
                deadlineClass += ' overdue';
                deadlineText = `–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞ ${Math.abs(daysLeft)} –¥–Ω.`;
            } else if (daysLeft === 0) {
                deadlineClass += ' soon';
                deadlineText = '–°–µ–≥–æ–¥–Ω—è';
            } else if (daysLeft === 1) {
                deadlineClass += ' soon';
                deadlineText = '–ó–∞–≤—Ç—Ä–∞';
            } else if (daysLeft <= 3) {
                deadlineClass += ' soon';
                deadlineText = `–ß–µ—Ä–µ–∑ ${daysLeft} –¥–Ω.`;
            } else {
                deadlineText = deadline.toLocaleDateString('ru-RU', { day: 'numeric', month: 'short' });
            }
            
            deadlineHtml = `<span class="${deadlineClass}">üìÖ ${deadlineText}</span>`;
        }
        
        item.innerHTML = `
            <div class="todo-checkbox ${task.completed ? 'checked' : ''}" data-id="${task.id}">
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <polyline points="20,6 9,17 4,12"></polyline>
                </svg>
            </div>
            <div class="todo-text" data-id="${task.id}">${this.escapeHtml(task.text)}</div>
            ${deadlineHtml}
            <div class="todo-priority" title="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${task.priority}">${priorityDots[task.priority]}</div>
            <button class="todo-delete" data-id="${task.id}" title="–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É">
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <polyline points="3,6 5,6 21,6"></polyline>
                    <path d="M19 6l-2 14H7L5 6"></path>
                </svg>
            </button>
        `;
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        const checkbox = item.querySelector('.todo-checkbox');
        const text = item.querySelector('.todo-text');
        const deleteBtn = item.querySelector('.todo-delete');
        
        checkbox.addEventListener('click', () => this.toggleTask(task.id));
        deleteBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            this.deleteTask(task.id);
        });
        
        // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –¥–≤–æ–π–Ω–æ–º—É –∫–ª–∏–∫—É
        text.addEventListener('dblclick', () => this.startEdit(task.id, text));
        
        return item;
    },
    
    // –ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
    startEdit(taskId, textElement) {
        const task = this.tasks.find(t => t.id === taskId);
        if (!task || task.completed) return;
        
        const input = document.createElement('input');
        input.type = 'text';
        input.className = 'todo-edit-input';
        input.value = task.text;
        input.maxLength = 100;
        
        textElement.replaceWith(input);
        input.focus();
        input.select();
        
        const finishEdit = () => {
            const newText = input.value.trim();
            if (newText && newText !== task.text) {
                this.editTask(taskId, newText);
            } else {
                this.render();
            }
        };
        
        input.addEventListener('blur', finishEdit);
        input.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                finishEdit();
            } else if (e.key === 'Escape') {
                this.render();
            }
        });
    },
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    animateTaskAdd() {
        const firstTask = this.elements.list.querySelector('.todo-item');
        if (firstTask) {
            firstTask.style.transform = 'translateY(-20px)';
            firstTask.style.opacity = '0';
            
            requestAnimationFrame(() => {
                firstTask.style.transition = 'all 0.3s ease';
                firstTask.style.transform = 'translateY(0)';
                firstTask.style.opacity = '1';
            });
        }
    },
    
    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
    render() {
        const filteredTasks = this.getFilteredTasks();
        
        // –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞
        this.elements.list.innerHTML = '';
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á
        if (filteredTasks.length === 0) {
            this.elements.list.innerHTML = this.getEmptyMessage();
        } else {
            filteredTasks.forEach(task => {
                this.elements.list.appendChild(this.createTaskElement(task));
            });
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        this.updateStats();
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏
        const completedCount = this.tasks.filter(t => t.completed).length;
        this.elements.clearCompleted.style.display = completedCount > 0 ? 'block' : 'none';
    },
    
    // –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—É—Å—Ç–æ–º —Å–ø–∏—Å–∫–µ
    getEmptyMessage() {
        const messages = {
            all: '–ù–µ—Ç –∑–∞–¥–∞—á. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é!',
            active: '–í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! üéâ',
            completed: '–ù–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á'
        };
        
        return `
            <div class="todo-empty">
                <div class="todo-empty-icon">üìù</div>
                <div class="todo-empty-text">${messages[this.currentFilter]}</div>
            </div>
        `;
    },
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    updateStats() {
        const total = this.tasks.length;
        const completed = this.tasks.filter(t => t.completed).length;
        const active = total - completed;
        
        this.elements.stats.textContent = `${completed}/${total}`;
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        if (total > 0) {
            const percent = Math.round((completed / total) * 100);
            this.elements.stats.title = `–í—ã–ø–æ–ª–Ω–µ–Ω–æ ${percent}% (${active} –∞–∫—Ç–∏–≤–Ω—ã—Ö)`;
        }
    },
    
    // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    },
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
    saveTasks() {
        localStorage.setItem('todo_tasks', JSON.stringify(this.tasks));
    },
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ localStorage
    loadTasks() {
        try {
            const saved = localStorage.getItem('todo_tasks');
            this.tasks = saved ? JSON.parse(saved) : [];
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á:', error);
            this.tasks = [];
        }
    },
    
    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –¥–∞—à–±–æ—Ä–¥–∞
    cleanup() {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞
        this.saveTasks();
    }
};

// –≠–∫—Å–ø–æ—Ä—Ç –º–æ–¥—É–ª—è
window.TodoModule = TodoModule; 